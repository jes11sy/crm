#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ CRM —Å–∏—Å—Ç–µ–º—ã
"""

import os
import sys
import subprocess
import secrets
import string
from pathlib import Path

def generate_secret_key(length=50):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π SECRET_KEY"""
    alphabet = string.ascii_letters + string.digits + string.punctuation
    alphabet = alphabet.replace('"', '').replace("'", '').replace('\\', '')
    return ''.join(secrets.choice(alphabet) for _ in range(length))

def check_security_issues():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–∞—Ä–¥–∫–æ–¥ SECRET_KEY
    for root, dirs, files in os.walk('.'):
        if 'venv' in root or '__pycache__' in root or 'scripts' in root:
            continue
        for file in files:
            if file.endswith('.py'):
                filepath = os.path.join(root, file)
                try:
                    with open(filepath, 'r', encoding='utf-8') as f:
                        content = f.read()
                        if 'django-insecure' in content:
                            issues.append(f"‚ùå –•–∞—Ä–¥–∫–æ–¥ SECRET_KEY –≤ {filepath}")
                except:
                    pass
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–æ–≤
    env_files = ['.env', '.env.local', '.env.production']
    for env_file in env_files:
        if os.path.exists(env_file):
            try:
                with open(env_file, 'r') as f:
                    content = f.read()
                    if 'your-secret-key' in content or 'change-this' in content:
                        issues.append(f"‚ùå –ù–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π SECRET_KEY –≤ {env_file}")
            except:
                pass
    
    return issues

def setup_environment():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not os.path.exists('.env'):
        print("üìù –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞...")
        
        env_content = f"""# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
SECRET_KEY={generate_secret_key()}
DEBUG=False
ALLOWED_HOSTS=localhost,127.0.0.1

# Database Settings
DB_NAME=crm_production
DB_USER=crm_user
DB_PASSWORD={generate_secret_key(20)}
DB_HOST=localhost
DB_PORT=5432

# Redis Settings
REDIS_URL=redis://localhost:6379/0

# Security Settings
CSRF_TRUSTED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
SECURE_SSL_REDIRECT=False
SESSION_COOKIE_SECURE=False
CSRF_COOKIE_SECURE=False

# Performance Settings
SLOW_REQUEST_THRESHOLD=5.0
HIGH_QUERY_COUNT_THRESHOLD=50
RATE_LIMIT_THRESHOLD=100
"""
        
        with open('.env', 'w') as f:
            f.write(env_content)
        
        print("‚úÖ .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")
    else:
        print("‚úÖ .env —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

def setup_docker_security():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å Docker"""
    print("üê≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Docker...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º docker-compose.yml
    if os.path.exists('docker-compose.yml'):
        print("‚úÖ docker-compose.yml –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PostgreSQL
        with open('docker-compose.yml', 'r') as f:
            content = f.read()
            if 'postgres' in content:
                print("‚úÖ PostgreSQL –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            else:
                print("‚ö†Ô∏è PostgreSQL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ docker-compose.yml")
    else:
        print("‚ö†Ô∏è docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω")

def setup_gitignore():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç .gitignore –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("üìÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ .gitignore...")
    
    security_patterns = [
        '.env',
        '.env.local',
        '.env.production',
        '*.pem',
        '*.key',
        '*.crt',
        'ssl_certs/',
        'secrets/',
        'bandit-report.json',
        'safety-report.json'
    ]
    
    if os.path.exists('.gitignore'):
        with open('.gitignore', 'r') as f:
            content = f.read()
        
        missing_patterns = []
        for pattern in security_patterns:
            if pattern not in content:
                missing_patterns.append(pattern)
        
        if missing_patterns:
            print(f"‚ö†Ô∏è –í .gitignore –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing_patterns)}")
        else:
            print("‚úÖ .gitignore –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    else:
        print("‚ö†Ô∏è .gitignore –Ω–µ –Ω–∞–π–¥–µ–Ω")

def run_security_checks():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å bandit
        print("üìä –ó–∞–ø—É—Å–∫ Bandit...")
        result = subprocess.run(['bandit', '-r', '.', '-f', 'json', '-o', 'bandit-report.json'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Bandit –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        else:
            print("‚ö†Ô∏è Bandit –Ω–∞—à–µ–ª –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å safety
        print("üìä –ó–∞–ø—É—Å–∫ Safety...")
        result = subprocess.run(['safety', 'check', '--json', '--output', 'safety-report.json'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Safety –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        else:
            print("‚ö†Ô∏è Safety –Ω–∞—à–µ–ª —É—è–∑–≤–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
            
    except FileNotFoundError:
        print("‚ö†Ô∏è Bandit –∏–ª–∏ Safety –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install bandit safety")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ CRM —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    issues = check_security_issues()
    if issues:
        print("\nüö® –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
        for issue in issues:
            print(f"  {issue}")
        print("\n–ò—Å–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º!")
        return 1
    
    print("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    setup_environment()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Docker
    setup_docker_security()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º .gitignore
    setup_gitignore()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    run_security_checks()
    
    print("\n" + "=" * 50)
    print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose up -d")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs")
    print("4. –†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ: python scripts/setup_security.py")
    
    return 0

if __name__ == "__main__":
    sys.exit(main()) 