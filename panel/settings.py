"""
Django settings for panel project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from dotenv import load_dotenv
load_dotenv()
import sys
from pathlib import Path
from datetime import timedelta
import json

# Настройка логирования для Windows
try:
    from core.logging_handlers import setup_windows_logging
    setup_windows_logging()
except ImportError:
    # Если модуль еще не создан, пропускаем
    pass

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')
if not SECRET_KEY:
    raise ValueError("SECRET_KEY environment variable is required")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '.ngrok-free.app',
]


# Application definition

INSTALLED_APPS = [
    'django_extensions',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'drf_spectacular',
    'core',
    'corsheaders',
    'django_filters',
    'django_prometheus',
]

MIDDLEWARE = [
    'django_prometheus.middleware.PrometheusBeforeMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'core.middleware.APIVersionRedirectMiddleware',
    'core.middleware.ErrorHandlingMiddleware',
    'core.middleware.SecurityMonitoringMiddleware',
    'core.middleware.PerformanceMonitoringMiddleware',
    'core.middleware.QueryCountDebugMiddleware' if DEBUG else None,
    'core.middleware.SecurityHeadersMiddleware',  # Перемещаем в конец для добавления заголовков
    'django_prometheus.middleware.PrometheusAfterMiddleware',
]

ROOT_URLCONF = 'panel.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'panel.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ.get('DB_NAME', 'CRM'),
        'USER': os.environ.get('DB_USER', 'postgres'),
        'PASSWORD': os.environ.get('DB_PASSWORD', '1740'),
        'HOST': os.environ.get('DB_HOST', 'localhost'),
        'PORT': os.environ.get('DB_PORT', '5432'),
    }
}

# Для тестов используем SQLite
if 'test' in sys.argv:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': ':memory:',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

MEDIA_URL = '/audio_files/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'audio_files')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Security settings - ВСЕГДА активны для безопасности
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
X_FRAME_OPTIONS = 'DENY'
SECURE_SSL_REDIRECT = not DEBUG  # Только в продакшене
SESSION_COOKIE_SECURE = not DEBUG  # Только в продакшене
CSRF_COOKIE_SECURE = not DEBUG  # Только в продакшене

# Дополнительные заголовки безопасности
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin'
SECURE_CROSS_ORIGIN_EMBEDDER_POLICY = 'require-corp'

# Настройки сессий
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:3000',
    'http://127.0.0.1:3000',
    'http://localhost:8000',
    'http://127.0.0.1:8000',
]

# Mango Office API settings
MANGO_API_KEY = os.environ.get('MANGO_API_KEY')
MANGO_API_SALT = os.environ.get('MANGO_API_SALT')

# Проверяем обязательные переменные окружения
if not MANGO_API_KEY:
    raise ValueError("MANGO_API_KEY environment variable is required")
if not MANGO_API_SALT:
    raise ValueError("MANGO_API_SALT environment variable is required")

# Mango Office Email settings для автоматического скачивания аудио
MANGO_EMAIL_SETTINGS = {
    'email': os.environ.get('MANGO_EMAIL', ''),
    'password': os.environ.get('MANGO_EMAIL_PASSWORD', ''),
    'imap_server': os.environ.get('MANGO_IMAP_SERVER', 'imap.gmail.com'),
    'imap_port': int(os.environ.get('MANGO_IMAP_PORT', '993')),
    'download_dir': os.environ.get('MANGO_DOWNLOAD_DIR', 'media/audio'),
}

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "http://crm.lead-schem.ru",
    "https://crm.lead-schem.ru",
    "http://www.crm.lead-schem.ru",
    "https://www.crm.lead-schem.ru",
]
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = DEBUG  # В режиме разработки разрешаем все origins
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]
CORS_EXPOSE_HEADERS = [
    'set-cookie',
]

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'core.authentication.JWTCookieAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'UNAUTHENTICATED_USER': None,  # Не создавать анонимного пользователя
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/hour',
        'user': '1000/hour',
        'login': '5/minute',
    },
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
    'EXCEPTION_HANDLER': 'core.utils.custom_exception_handler',
}

# JWT settings
JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': timedelta(days=1),
    'JWT_REFRESH_EXPIRATION_DELTA': timedelta(days=7),
    'JWT_AUTH_HEADER_PREFIX': 'Bearer',
}

# Cache settings
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
        'TIMEOUT': 300,
    }
}
SESSION_ENGINE = 'django.contrib.sessions.backends.db'

# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'core.logging_handlers.SafeUTF8FileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
            'formatter': 'verbose',
            'encoding': 'utf-8',
        },
        'alerts_file': {
            'level': 'WARNING',
            'class': 'core.logging_handlers.SafeUTF8FileHandler',
            'filename': BASE_DIR / 'logs' / 'alerts.log',
            'formatter': 'verbose',
            'encoding': 'utf-8',
        },
        'console': {
            'level': 'INFO',
            'class': 'core.logging_handlers.ConsoleHandler',
            'formatter': 'verbose',
        },
        'telegram': {
            'level': 'ERROR',
            'class': 'core.telegram_handler.TelegramLogHandler',
        },
    },
    'loggers': {
        'monitoring': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        },
        'alerts': {
            'handlers': ['alerts_file'],
            'level': 'WARNING',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['telegram'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.server': {
            'handlers': ['telegram'],
            'level': 'ERROR',
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['file', 'console'],
        'level': 'INFO',
    },
}

# Create logs directory if it doesn't exist
os.makedirs(BASE_DIR / 'logs', exist_ok=True)

# Monitoring and Alerting Settings
ALERTS_ENABLED = os.environ.get('ALERTS_ENABLED', 'False').lower() == 'true'
ALERT_EMAIL_ENABLED = os.environ.get('ALERT_EMAIL_ENABLED', 'False').lower() == 'true'
ALERT_WEBHOOK_URL = os.environ.get('ALERT_WEBHOOK_URL', None)
ALERT_WEBHOOK_HEADERS = json.loads(os.environ.get('ALERT_WEBHOOK_HEADERS', '{}'))

# Telegram Alert Settings
TELEGRAM_ALERTS_ENABLED = os.environ.get('TELEGRAM_ALERTS_ENABLED', 'True').lower() == 'true'
TELEGRAM_ERROR_ALERTS = os.environ.get('TELEGRAM_ERROR_ALERTS', 'True').lower() == 'true'
TELEGRAM_BUSINESS_ALERTS = os.environ.get('TELEGRAM_BUSINESS_ALERTS', 'True').lower() == 'true'

TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID')

# Проверяем обязательные переменные окружения для Telegram
if TELEGRAM_ALERTS_ENABLED:
    if not TELEGRAM_BOT_TOKEN:
        raise ValueError("TELEGRAM_BOT_TOKEN environment variable is required when TELEGRAM_ALERTS_ENABLED=True")
    if not TELEGRAM_CHAT_ID:
        raise ValueError("TELEGRAM_CHAT_ID environment variable is required when TELEGRAM_ALERTS_ENABLED=True")

# Email settings for alerts
SMTP_HOST = os.environ.get('SMTP_HOST', 'localhost')
SMTP_PORT = int(os.environ.get('SMTP_PORT', '587'))
SMTP_USER = os.environ.get('SMTP_USER', '')
SMTP_PASSWORD = os.environ.get('SMTP_PASSWORD', '')
ALERT_EMAILS = os.environ.get('ALERT_EMAILS', '').split(',') if os.environ.get('ALERT_EMAILS') else []

# Environment settings
ENVIRONMENT = os.environ.get('ENVIRONMENT', 'development')

# Performance monitoring thresholds
PERFORMANCE_THRESHOLDS = {
    'slow_request_threshold': float(os.environ.get('SLOW_REQUEST_THRESHOLD', '5.0')),  # seconds
    'high_query_count_threshold': int(os.environ.get('HIGH_QUERY_COUNT_THRESHOLD', '50')),
    'rate_limit_threshold': int(os.environ.get('RATE_LIMIT_THRESHOLD', '100')),  # requests per minute
    'cpu_threshold': float(os.environ.get('CPU_THRESHOLD', '80.0')),  # percent
    'memory_threshold': float(os.environ.get('MEMORY_THRESHOLD', '90.0')),  # percent
    'disk_threshold': float(os.environ.get('DISK_THRESHOLD', '90.0')),  # percent
}

# Monitoring endpoints security
MONITORING_ENDPOINTS_SECURE = os.environ.get('MONITORING_ENDPOINTS_SECURE', 'False').lower() == 'true'
MONITORING_API_KEY = os.environ.get('MONITORING_API_KEY', '')

# Health check settings
HEALTH_CHECK_CACHE_TIMEOUT = int(os.environ.get('HEALTH_CHECK_CACHE_TIMEOUT', '300'))  # 5 minutes
HEALTH_CHECK_DETAILED_CACHE_TIMEOUT = int(os.environ.get('HEALTH_CHECK_DETAILED_CACHE_TIMEOUT', '60'))  # 1 minute

# Logging for monitoring is now configured in the LOGGING dictionary above

# Spectacular settings for API documentation
SPECTACULAR_SETTINGS = {
    'TITLE': 'CRM API',
    'DESCRIPTION': 'API для CRM системы управления заявками, мастерами и финансами',
    'VERSION': '2.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,
    'SCHEMA_PATH_PREFIX': '/api/',
    'CONTACT': {
        'name': 'CRM Support',
        'email': 'support@crm.local',
    },
    'LICENSE': {
        'name': 'MIT License',
    },
    'TAGS': [
        {'name': 'auth', 'description': 'Аутентификация и авторизация'},
        {'name': 'gorod', 'description': 'Управление городами'},
        {'name': 'master', 'description': 'Управление мастерами'},
        {'name': 'zayavki', 'description': 'Управление заявками'},
        {'name': 'finance', 'description': 'Финансовые операции'},
        {'name': 'reports', 'description': 'Отчёты и статистика'},
        {'name': 'mango', 'description': 'Интеграция с Mango Office'},
        {'name': 'monitoring', 'description': 'Мониторинг системы'},
    ],
    'SECURITY': [
        {
            'Bearer': []
        }
    ],
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayOperationId': True,
    },
    'REDOC_UI_SETTINGS': {
        'hideDownloadButton': True,
        'hideHostname': True,
    },
}
