from rest_framework import viewsets, status
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.decorators import action
from rest_framework.parsers import MultiPartParser, FormParser, JSONParser
from rest_framework.permissions import IsAuthenticated
from ..models import Zayavki, ZayavkaFile
from ..serializers import ZayavkiSerializer, ZayavkaFileSerializer
from ..permissions import IsKCUserOrAbove, IsSameCity
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from django.http import JsonResponse
from pathlib import Path
import os
import traceback
import logging
import json
import requests
from django.utils import timezone

logger = logging.getLogger(__name__)

TELEGRAM_BOT_TOKEN = '8032155601:AAG9myXmM3tO12LRFsX9T64wVIEdi6pexi8'
TELEGRAM_CHAT_ID = 1802367546

class ZayavkiViewSet(viewsets.ModelViewSet):
    queryset = Zayavki.objects.select_related('gorod', 'master', 'rk', 'tip_zayavki').prefetch_related('files')
    serializer_class = ZayavkiSerializer
    permission_classes = [IsKCUserOrAbove, IsSameCity]
    filterset_fields = ['status', 'gorod', 'master', 'rk', 'tip_zayavki']
    search_fields = ['client_name', 'phone_client', 'address']
    ordering_fields = ['created_at', 'meeting_date', 'status']
    def get_queryset(self):
        queryset = super().get_queryset()
        user = self.request.user
        if hasattr(user, 'gorod_id'):
            return queryset.filter(gorod_id=user.gorod_id)
        return queryset
    @action(detail=False, methods=['get'])
    def by_status(self, request):
        status_param = request.query_params.get('status')
        queryset = self.get_queryset().filter(status=status_param)
        serializer = self.get_serializer(queryset, many=True)
        return Response(serializer.data)
    @action(detail=False, methods=['get'])
    def incoming(self, request):
        queryset = self.get_queryset().filter(status='–û–∂–∏–¥–∞–µ—Ç')
        serializer = self.get_serializer(queryset, many=True)
        return Response(serializer.data)

class ZayavkaFileViewSet(viewsets.ModelViewSet):
    queryset = ZayavkaFile.objects.all()
    serializer_class = ZayavkaFileSerializer
    parser_classes = [MultiPartParser, FormParser]
    permission_classes = [IsAuthenticated]
    def get_queryset(self):
        return super().get_queryset()
    def perform_create(self, serializer):
        serializer.save(uploaded_by=self.request.user)
    def create(self, request, *args, **kwargs):
        return super().create(request, *args, **kwargs)

def mango_audio_files(request):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        file_path = request.GET.get('file_path')
        if not file_path:
            return JsonResponse({'error': '–ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É'}, status=400)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        full_path = Path(file_path)
        if not full_path.exists():
            return JsonResponse({'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=404)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(full_path, 'rb') as f:
            response = JsonResponse(f.read())
            response['Content-Type'] = 'audio/mpeg'
            response['Content-Disposition'] = f'attachment; filename="{full_path.name}"'
            return response
            
    except Exception as e:
        logger.error(f"Error serving mango audio file: {e}")
        return JsonResponse({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞'}, status=500)

class MangoIncomingCallView(APIView):
    permission_classes = []
    def normalize_phone(self, phone):
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
        phone = ''.join(filter(str.isdigit, str(phone)))
        # –î–æ–±–∞–≤–ª—è–µ–º 7 –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8 –∏–ª–∏ 9
        if phone.startswith('8'):
            phone = '7' + phone[1:]
        elif phone.startswith('9') and len(phone) == 10:
            phone = '7' + phone
        return phone
    def post(self, request):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Mango
            data = request.data
            logger.info(f"Mango incoming call data: {data}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            phone = data.get('from', {}).get('number', '')
            if not phone:
                return Response({'error': '–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'}, status=400)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä
            normalized_phone = self.normalize_phone(phone)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
            zayavka = Zayavki.objects.create(
                phone_client=normalized_phone,
                client_name='–ó–≤–æ–Ω–æ–∫ —Å Mango',
                address='–ù–µ —É–∫–∞–∑–∞–Ω',
                meeting_date=timezone.now(),
                tip_techniki='–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                problema='–í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫',
                status='–û–∂–∏–¥–∞–µ—Ç',
                kc_name='Mango'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            message = f"üìû –ù–æ–≤—ã–π –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫\n–ù–æ–º–µ—Ä: {normalized_phone}\n–ó–∞—è–≤–∫–∞: {zayavka.id}"
            try:
                requests.post(
                    f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
                    data={
                        'chat_id': TELEGRAM_CHAT_ID,
                        'text': message
                    }
                )
            except Exception as e:
                logger.error(f"Error sending Telegram notification: {e}")
            
            return Response({'success': True, 'zayavka_id': zayavka.id})
            
        except Exception as e:
            logger.error(f"Error processing Mango incoming call: {e}")
            return Response({'error': '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–∞'}, status=500)

class MangoEmailProcessingView(APIView):
    permission_classes = [IsAuthenticated]
    def post(self, request):
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∏—Å–µ–º —Å –∑–∞–ø–∏—Å—è–º–∏ –æ—Ç Mango Office
            data = request.data
            logger.info(f"Mango email processing data: {data}")
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å–µ–º
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏–≤—è–∑–∫–∞ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ –∫ –∑–∞—è–≤–∫–µ
            
            return Response({'success': True})
            
        except Exception as e:
            logger.error(f"Error processing Mango email: {e}")
            return Response({'error': '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞'}, status=500)
    def get(self, request):
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∏—Å—å–º–∞—Ö
            return Response({'status': 'ok'})
        except Exception as e:
            logger.error(f"Error getting Mango email info: {e}")
            return Response({'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}, status=500) 