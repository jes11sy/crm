"""
–ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8
"""

import logging
import sys
import os
from typing import Optional


class SafeUTF8FileHandler(logging.FileHandler):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8 –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —ç–º–æ–¥–∑–∏
    """
    
    def __init__(self, filename: str, mode: str = 'a', encoding: str = 'utf-8', 
                 delay: bool = False, errors: Optional[str] = None):
        super().__init__(filename, mode, encoding, delay, errors)
    
    def emit(self, record):
        """
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º emit –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —ç–º–æ–¥–∑–∏
        """
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            safe_msg = self._sanitize_message(record.getMessage())
            record.msg = safe_msg
            record.args = ()  # –û—á–∏—â–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã, —Ç–∞–∫ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
            
            super().emit(record)
        except Exception:
            # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ª–æ–≥–∏—Ä—É–µ–º –≤ stderr
            try:
                sys.stderr.write(f"Logging error: {record.getMessage()}\n")
                sys.stderr.flush()
            except:
                pass
    
    def _sanitize_message(self, message: str) -> str:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        """
        if not isinstance(message, str):
            return str(message)
        
        # –ó–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        emoji_replacements = {
            'üîê': '[LOGIN]',
            '‚è∞': '[TIME]',
            'üìÑ': '[DESC]',
            'üë§': '[USER]',
            'üö®': '[ERROR]',
            '‚ö†Ô∏è': '[WARNING]',
            '‚úÖ': '[SUCCESS]',
            '‚ùå': '[FAIL]',
            'üí∞': '[MONEY]',
            'üìù': '[NOTE]',
            'üîó': '[LINK]',
            'üìã': '[DETAILS]',
            '‚ÑπÔ∏è': '[INFO]',
            'üì¢': '[ALERT]',
        }
        
        for emoji, replacement in emoji_replacements.items():
            message = message.replace(emoji, replacement)
        
        # –î–ª—è Windows: –æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, —Ç–∞–∫ –∫–∞–∫ —Ñ–∞–π–ª –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ UTF-8
        return message


class ConsoleHandler(logging.StreamHandler):
    """
    –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8
    """
    
    def __init__(self, stream=None):
        if stream is None:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º stderr –¥–ª—è –æ—à–∏–±–æ–∫, stdout –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ
            stream = sys.stdout
        super().__init__(stream)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows
        if hasattr(stream, 'reconfigure'):
            try:
                stream.reconfigure(encoding='utf-8', errors='replace')
            except:
                pass
    
    def emit(self, record):
        """
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º emit –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            safe_msg = self._sanitize_message(record.getMessage())
            record.msg = safe_msg
            record.args = ()
            
            super().emit(record)
        except Exception:
            # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤—ã–≤–æ–¥–∏–º –≤ stderr
            try:
                sys.stderr.write(f"Console logging error: {record.getMessage()}\n")
                sys.stderr.flush()
            except:
                pass
    
    def _sanitize_message(self, message: str) -> str:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        """
        if not isinstance(message, str):
            return str(message)
        
        # –ó–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã
        emoji_replacements = {
            'üîê': '[LOGIN]',
            '‚è∞': '[TIME]',
            'üìÑ': '[DESC]',
            'üë§': '[USER]',
            'üö®': '[ERROR]',
            '‚ö†Ô∏è': '[WARNING]',
            '‚úÖ': '[SUCCESS]',
            '‚ùå': '[FAIL]',
            'üí∞': '[MONEY]',
            'üìù': '[NOTE]',
            'üîó': '[LINK]',
            'üìã': '[DETAILS]',
            '‚ÑπÔ∏è': '[INFO]',
            'üì¢': '[ALERT]',
        }
        
        for emoji, replacement in emoji_replacements.items():
            message = message.replace(emoji, replacement)
        
        return message


def setup_windows_logging():
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Windows —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8
    """
    import logging.config
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã –Ω–∞ Windows
    is_windows = os.name == 'nt'
    
    if is_windows:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è stdout –∏ stderr
        try:
            if hasattr(sys.stdout, 'reconfigure'):
                sys.stdout.reconfigure(encoding='utf-8', errors='replace')
            if hasattr(sys.stderr, 'reconfigure'):
                sys.stderr.reconfigure(encoding='utf-8', errors='replace')
        except:
            pass
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Python
        os.environ['PYTHONIOENCODING'] = 'utf-8'
    
    return is_windows 