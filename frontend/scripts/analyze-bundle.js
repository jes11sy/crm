#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîç –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–Ω–¥–ª–∞...');

try {
  // –°–æ–∑–¥–∞–µ–º production build
  console.log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ production build...');
  execSync('npm run build', { stdio: 'inherit' });
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –±–∞–Ω–¥–ª–∞
  console.log('üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤...');
  const buildPath = path.join(__dirname, '..', 'build', 'static', 'js');
  
  if (fs.existsSync(buildPath)) {
    const files = fs.readdirSync(buildPath);
    
    console.log('\nüìã –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ JavaScript:');
    files.forEach(file => {
      if (file.endsWith('.js')) {
        const filePath = path.join(buildPath, file);
        const stats = fs.statSync(filePath);
        const sizeKB = (stats.size / 1024).toFixed(2);
        console.log(`  ${file}: ${sizeKB} KB`);
      }
    });
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º CSS —Ñ–∞–π–ª—ã
  const cssPath = path.join(__dirname, '..', 'build', 'static', 'css');
  if (fs.existsSync(cssPath)) {
    const cssFiles = fs.readdirSync(cssPath);
    
    console.log('\nüìã –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ CSS:');
    cssFiles.forEach(file => {
      if (file.endsWith('.css')) {
        const filePath = path.join(cssPath, file);
        const stats = fs.statSync(filePath);
        const sizeKB = (stats.size / 1024).toFixed(2);
        console.log(`  ${file}: ${sizeKB} KB`);
      }
    });
  }
  
  console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
  console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('  - –§–∞–π–ª—ã –±–æ–ª—å—à–µ 500KB —Å—Ç–æ–∏—Ç —Ä–∞–∑–±–∏—Ç—å –Ω–∞ —á–∞–Ω–∫–∏');
  console.log('  - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ React.lazy() –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
  console.log('  - –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∏–∫–æ–Ω–∫–∏');
  
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error.message);
  process.exit(1);
} 