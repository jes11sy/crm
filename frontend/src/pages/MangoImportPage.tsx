import React, { useState, useEffect } from 'react';
import useAuth from '../hooks/useAuth';
import { apiUtils, getMangoAudioFiles } from '../utils/api';
import './MangoImportPage.css';

interface ImportHistoryItem {
  status: string;
  created_at: string;
  date_from: string;
  date_to: string;
  message: string;
  calls_imported?: number;
  recordings_downloaded?: number;
}

interface ImportStatus {
  success: boolean;
  message: string;
  data?: any;
}

interface Settings {
  api_key: string;
  api_salt: string;
  date_from: string;
  date_to: string;
  auto_import_enabled: boolean;
}

interface MangoAudioFile {
  name: string;
  size: number;
  modified: number;
}

const MangoImportPage: React.FC = () => {
  const { user } = useAuth();
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [importStatus, setImportStatus] = useState<ImportStatus | null>(null);
  const [importHistory, setImportHistory] = useState([] as ImportHistoryItem[]);
  const [settings, setSettings] = useState<Settings>({
    api_key: 'l3t9b6nv42egkl98ojrtr6mg5z96e917',
    api_salt: 'xt81kobtimc6n7u1k8w9dt026up77qq8',
    date_from: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    date_to: new Date().toISOString().split('T')[0],
    auto_import_enabled: false
  });
  const [audioFiles, setAudioFiles] = useState([] as MangoAudioFile[]);
  const [audioLoading, setAudioLoading] = useState(false);
  const [audioError, setAudioError] = useState<string | null>(null);

  useEffect(() => {
    loadImportHistory();
  }, []);

  useEffect(() => {
    loadAudioFiles();
  }, []);

  const loadImportHistory = async (): Promise<void> => {
    try {
      const response = await apiUtils.get('/mango/import-history/');
      if (response.data.success) {
        setImportHistory(response.data.data);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
    }
  };

  const loadAudioFiles = async (): Promise<void> => {
    setAudioLoading(true);
    setAudioError(null);
    try {
      const res = await getMangoAudioFiles();
      setAudioFiles(res.files || []);
    } catch (e) {
      setAudioError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤');
    } finally {
      setAudioLoading(false);
    }
  };

  const handleImport = async (dryRun = false): Promise<void> => {
    setIsLoading(true);
    setImportStatus(null);
    try {
      const response = await apiUtils.post('/mango/import/', {
        api_key: settings.api_key,
        api_salt: settings.api_salt,
        date_from: settings.date_from,
        date_to: settings.date_to,
        dry_run: dryRun
      });
      setImportStatus({
        success: response.data.success,
        message: response.data.message,
        data: response.data.data
      });
      if (response.data.success) {
        loadImportHistory();
      }
    } catch (error: any) {
      setImportStatus({
        success: false,
        message: error.response?.data?.message || error.message || '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞'
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleTestConnection = async (): Promise<void> => {
    setIsLoading(true);
    try {
      const response = await apiUtils.post('/mango/test-connection/', {
        api_key: settings.api_key,
        api_salt: settings.api_salt
      });
      setImportStatus({
        success: response.data.success,
        message: response.data.message
      });
    } catch (error: any) {
      setImportStatus({
        success: false,
        message: error.response?.data?.message || error.message || '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'
      });
    } finally {
      setIsLoading(false);
    }
  };

  const formatDate = (dateString: string): string => {
    return new Date(dateString).toLocaleString('ru-RU');
  };

  const getStatusIcon = (status: string): string => {
    switch (status) {
      case 'success': return '‚úÖ';
      case 'error': return '‚ùå';
      case 'running': return 'üîÑ';
      default: return '‚è≥';
    }
  };

  return (
    <div className="mango-import-page">
      <div className="mango-import-header">
        <h1>üéôÔ∏è –ò–º–ø–æ—Ä—Ç –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–µ–π Mango Office</h1>
        <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∏–º–ø–æ—Ä—Ç–æ–º –∑–≤–æ–Ω–∫–æ–≤ –∏ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–µ–π</p>
      </div>
      <div className="mango-import-container">
        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <div className="settings-section">
          <h2>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API</h2>
          <div className="settings-grid">
            <div className="setting-group">
              <label>API Key:</label>
              <input
                type="text"
                value={settings.api_key}
                onChange={e => setSettings({ ...settings, api_key: e.target.value })}
                placeholder="–í–≤–µ–¥–∏—Ç–µ API Key"
              />
            </div>
            <div className="setting-group">
              <label>API Salt:</label>
              <input
                type="text"
                value={settings.api_salt}
                onChange={e => setSettings({ ...settings, api_salt: e.target.value })}
                placeholder="–í–≤–µ–¥–∏—Ç–µ API Salt"
              />
            </div>
            <div className="setting-group">
              <label>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</label>
              <input
                type="date"
                value={settings.date_from}
                onChange={e => setSettings({ ...settings, date_from: e.target.value })}
              />
            </div>
            <div className="setting-group">
              <label>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</label>
              <input
                type="date"
                value={settings.date_to}
                onChange={e => setSettings({ ...settings, date_to: e.target.value })}
              />
            </div>
          </div>
        </div>
        {/* –î–µ–π—Å—Ç–≤–∏—è */}
        <div className="actions-section">
          <h2>üöÄ –î–µ–π—Å—Ç–≤–∏—è</h2>
          <div className="action-buttons">
            <button
              className="btn btn-primary"
              onClick={() => handleTestConnection()}
              disabled={isLoading}
            >
              {isLoading ? 'üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : 'üîç –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'}
            </button>
            <button
              className="btn btn-secondary"
              onClick={() => handleImport(true)}
              disabled={isLoading}
            >
              {isLoading ? 'üîÑ –¢–µ—Å—Ç–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç...' : 'üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç'}
            </button>
            <button
              className="btn btn-success"
              onClick={() => handleImport(false)}
              disabled={isLoading}
            >
              {isLoading ? 'üîÑ –ò–º–ø–æ—Ä—Ç...' : 'üì• –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–º–ø–æ—Ä—Ç'}
            </button>
          </div>
        </div>
        {/* –°—Ç–∞—Ç—É—Å */}
        {importStatus && (
          <div className={`status-section ${importStatus.success ? 'success' : 'error'}`}>
            <h2>üìä –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏</h2>
            <div className="status-message">
              <span className="status-icon">
                {importStatus.success ? '‚úÖ' : '‚ùå'}
              </span>
              <span className="status-text">{importStatus.message}</span>
            </div>
            {importStatus.data && (
              <div className="status-details">
                <pre>{JSON.stringify(importStatus.data, null, 2)}</pre>
              </div>
            )}
          </div>
        )}
        {/* –ò—Å—Ç–æ—Ä–∏—è –∏–º–ø–æ—Ä—Ç–∞ */}
        <div className="history-section">
          <h2>üìã –ò—Å—Ç–æ—Ä–∏—è –∏–º–ø–æ—Ä—Ç–∞</h2>
          <div className="history-list">
            {importHistory.length === 0 ? (
              <p className="no-data">–ò—Å—Ç–æ—Ä–∏—è –∏–º–ø–æ—Ä—Ç–∞ –ø—É—Å—Ç–∞</p>
            ) : (
              importHistory.map((item, index) => (
                <div key={index} className="history-item">
                  <div className="history-header">
                    <span className="history-status">
                      {getStatusIcon(item.status)}
                    </span>
                    <span className="history-date">
                      {formatDate(item.created_at)}
                    </span>
                  </div>
                  <div className="history-details">
                    <p><strong>–ü–µ—Ä–∏–æ–¥:</strong> {item.date_from} - {item.date_to}</p>
                    <p><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> {item.message}</p>
                    {item.calls_imported && (
                      <p><strong>–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–≤–æ–Ω–∫–æ–≤:</strong> {item.calls_imported}</p>
                    )}
                    {item.recordings_downloaded && (
                      <p><strong>–°–∫–∞—á–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π:</strong> {item.recordings_downloaded}</p>
                    )}
                  </div>
                </div>
              ))
            )}
          </div>
        </div>
        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
        <div className="instructions-section">
          <h2>üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</h2>
          <div className="instructions-content">
            <h3>–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç:</h3>
            <ol>
              <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–µ–π</li>
              <li>–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</li>
              <li>–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç</li>
              <li>–ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Ç–µ—Å—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç</li>
              <li>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ Windows</li>
            </ol>
            <h3>–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:</h3>
            <code>python auto_import_mango.py</code>
            <h3>–õ–æ–≥–∏ –∏–º–ø–æ—Ä—Ç–∞:</h3>
            <p>–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª–µ: <code>logs/auto_import_mango.log</code></p>
          </div>
        </div>
        {/* –°–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ Mango Office */}
        <div className="audio-files-section">
          <h2>üéß –°–∫–∞—á–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ Mango Office</h2>
          {audioLoading && <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>}
          {audioError && <div className="error">{audioError}</div>}
          {!audioLoading && !audioError && (
            <table className="audio-files-table">
              <thead>
                <tr>
                  <th>–ò–º—è —Ñ–∞–π–ª–∞</th>
                  <th>–†–∞–∑–º–µ—Ä</th>
                  <th>–î–∞—Ç–∞</th>
                </tr>
              </thead>
              <tbody>
                {audioFiles.length === 0 && (
                  <tr><td colSpan={3}>–ù–µ—Ç —Ñ–∞–π–ª–æ–≤</td></tr>
                )}
                {audioFiles.map(f => (
                  <tr key={f.name}>
                    <td>{f.name}</td>
                    <td>{(f.size/1024).toFixed(1)} –ö–ë</td>
                    <td>{new Date(f.modified*1000).toLocaleString('ru-RU')}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}
        </div>
      </div>
    </div>
  );
};

export default MangoImportPage; 