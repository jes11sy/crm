#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã CRM
"""

import requests
import time
import json
from typing import Dict, List

class MicroservicesTester:
    def __init__(self):
        self.base_urls = {
            'api_gateway': 'http://localhost:8000',
            'user_service': 'http://localhost:8001',
            'zayavki_service': 'http://localhost:8002',
            'finance_service': 'http://localhost:8003'
        }
        
    def test_health_check(self) -> Dict[str, bool]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check endpoints"""
        results = {}
        
        for service, url in self.base_urls.items():
            try:
                response = requests.get(f"{url}/health/", timeout=5)
                results[service] = response.status_code == 200
                print(f"‚úÖ {service}: Health check passed")
            except requests.exceptions.RequestException as e:
                results[service] = False
                print(f"‚ùå {service}: Health check failed - {e}")
                
        return results
    
    def test_swagger_docs(self) -> Dict[str, bool]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        results = {}
        
        for service, url in self.base_urls.items():
            try:
                response = requests.get(f"{url}/swagger/", timeout=5)
                results[service] = response.status_code == 200
                print(f"‚úÖ {service}: Swagger docs accessible")
            except requests.exceptions.RequestException as e:
                results[service] = False
                print(f"‚ùå {service}: Swagger docs failed - {e}")
                
        return results
    
    def test_api_gateway_proxy(self) -> Dict[str, bool]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ API Gateway"""
        results = {}
        
        # –¢–µ—Å—Ç –ø—Ä–æ–∫—Å–∏ –∫ User Service
        try:
            response = requests.get(f"{self.base_urls['api_gateway']}/api/v1/users/", timeout=5)
            results['users_proxy'] = response.status_code in [200, 401, 403]  # 401/403 - –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            print(f"‚úÖ API Gateway -> User Service: Proxy working")
        except requests.exceptions.RequestException as e:
            results['users_proxy'] = False
            print(f"‚ùå API Gateway -> User Service: Proxy failed - {e}")
        
        # –¢–µ—Å—Ç –ø—Ä–æ–∫—Å–∏ –∫ Zayavki Service
        try:
            response = requests.get(f"{self.base_urls['api_gateway']}/api/v1/zayavki/", timeout=5)
            results['zayavki_proxy'] = response.status_code in [200, 401, 403]
            print(f"‚úÖ API Gateway -> Zayavki Service: Proxy working")
        except requests.exceptions.RequestException as e:
            results['zayavki_proxy'] = False
            print(f"‚ùå API Gateway -> Zayavki Service: Proxy failed - {e}")
        
        # –¢–µ—Å—Ç –ø—Ä–æ–∫—Å–∏ –∫ Finance Service
        try:
            response = requests.get(f"{self.base_urls['api_gateway']}/api/v1/finance/tranzakcii/", timeout=5)
            results['finance_proxy'] = response.status_code in [200, 401, 403]
            print(f"‚úÖ API Gateway -> Finance Service: Proxy working")
        except requests.exceptions.RequestException as e:
            results['finance_proxy'] = False
            print(f"‚ùå API Gateway -> Finance Service: Proxy failed - {e}")
            
        return results
    
    def test_direct_services(self) -> Dict[str, bool]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å–∞–º"""
        results = {}
        
        # User Service
        try:
            response = requests.get(f"{self.base_urls['user_service']}/api/v1/users/", timeout=5)
            results['user_service_direct'] = response.status_code in [200, 401, 403]
            print(f"‚úÖ User Service: Direct access working")
        except requests.exceptions.RequestException as e:
            results['user_service_direct'] = False
            print(f"‚ùå User Service: Direct access failed - {e}")
        
        # Zayavki Service
        try:
            response = requests.get(f"{self.base_urls['zayavki_service']}/api/v1/zayavki/", timeout=5)
            results['zayavki_service_direct'] = response.status_code in [200, 401, 403]
            print(f"‚úÖ Zayavki Service: Direct access working")
        except requests.exceptions.RequestException as e:
            results['zayavki_service_direct'] = False
            print(f"‚ùå Zayavki Service: Direct access failed - {e}")
        
        # Finance Service
        try:
            response = requests.get(f"{self.base_urls['finance_service']}/api/v1/tranzakcii/", timeout=5)
            results['finance_service_direct'] = response.status_code in [200, 401, 403]
            print(f"‚úÖ Finance Service: Direct access working")
        except requests.exceptions.RequestException as e:
            results['finance_service_direct'] = False
            print(f"‚ùå Finance Service: Direct access failed - {e}")
            
        return results
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã CRM")
        print("=" * 60)
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        time.sleep(3)
        
        print("\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Health Check:")
        health_results = self.test_health_check()
        
        print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:")
        swagger_results = self.test_swagger_docs()
        
        print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å–∞–º:")
        direct_results = self.test_direct_services()
        
        print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ API Gateway:")
        proxy_results = self.test_api_gateway_proxy()
        
        # –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n" + "=" * 60)
        print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
        print("=" * 60)
        
        all_results = {**health_results, **swagger_results, **direct_results, **proxy_results}
        passed = sum(all_results.values())
        total = len(all_results)
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed}/{total}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {total - passed}/{total}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed/total)*100:.1f}%")
        
        if passed == total:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            print("–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            print("\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò.")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã.")
        
        print("\nüîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:")
        print(f"API Gateway: {self.base_urls['api_gateway']}")
        print(f"Swagger Docs: {self.base_urls['api_gateway']}/swagger/")
        print(f"Health Check: {self.base_urls['api_gateway']}/health/")

if __name__ == "__main__":
    tester = MicroservicesTester()
    tester.run_all_tests() 